# -*- coding: utf-8 -*-
"""Docker_STR3_10H_42_K2x1_M16_W128_EMB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17_jXSGQHO7x2hnyn-8x_cHm4AUTLCbss
"""


import torch
import torch.nn as nn
from torchvision import transforms
import os
from PIL import Image
import warnings
from einops import rearrange

from backbone import ResTranformer
from resnet import resnet45
from itertools import groupby
import matplotlib.pyplot as plt
import shutil

def move_images(source_folder, destination_folder, image_names):
    for image_name in image_names:
        source_path = os.path.join(source_folder, image_name)
        destination_path = os.path.join(destination_folder, image_name)
        
        try:
            shutil.move(source_path, destination_path)
            print(f"Moved {image_name} to {destination_folder}")
        except Exception as e:
            print(f"Error moving {image_name}: {e}")

class BaseVision(nn.Module):
    def __init__(self,num_class,
                 d_model=512, nhead=8, d_inner=2048, dropout=0.1, activation='relu',
                 backbone='transformer', backbone_ln=3):
        super().__init__()
        #self.loss_weight = loss_weight
        self.out_channels = d_model

        if backbone == 'transformer':
            self.backbone = ResTranformer(d_model, nhead, d_inner, dropout, activation, backbone_ln)
        else:
            self.backbone = resnet45()


        #self.pos_encoding = PositionalEncoding1D(512)
        self.Prediction = nn.Linear(512,num_class)
        self.AdaptiveAvgPool = nn.AdaptiveAvgPool2d((None, 1)) 


    def forward(self, images):
        outputs = self.backbone(images.repeat(1,3,1,1))  # (N, E, H, W)
        
        enc_src= rearrange(outputs, 'b c h w -> b h w c')

        outputs = self.Prediction(enc_src) 

        outputs  = rearrange(outputs , 'b h w c -> b w (h c)', h = 8)

        probs = torch.nn.functional.softmax(outputs,dim=-1)#.permute(1,0,2)
        probs  = rearrange(probs , 'b w (h c) -> b h w c', h = 8)
        log_probs = torch.log(probs.sum(dim=1))
        return log_probs
    


class LatinOCR():




    def __init__(self, weight_file, device = torch.device('cpu')) -> None:

        self.toTensor = transforms.ToTensor()
        self.CHARS = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        self.CHARS = ['_PAD','SOS','EOS']+self.CHARS 
        print(weight_file)
        self.chars2idx = {o:i for i,o in enumerate(self.CHARS)}
        self.idx2chars = {i:o for i,o in enumerate(self.CHARS)}
        self.TRG_PAD_IDX = self.chars2idx['_PAD']
        self.device = device
        self.model = self.get_model(weight_file, device=device)
        self.model.eval()
    def get_model(self, checkpoint = '',is_pretrained = True, device = torch.device('cpu')):

        OUTPUT_DIM = len(self.CHARS)


        #CNN_HEIGHT = 6

        model = BaseVision(OUTPUT_DIM)
        #states = model.state_dict()
        try:
            if checkpoint != '':
                dict_state = torch.load(checkpoint, map_location="cpu")
                dict_state = {k.replace('encoder.',''):v for k,v in dict_state.items()}
                model.load_state_dict(dict_state)
        except:
            pass
        model.to(device)
        return model

    def translate_sentence(self,src):

        #model.eval()
        #src = src.unsqueeze(1)
        output = self.model(src)
        #output = torch.nn.functional.log_softmax(output,dim=-1)
        output = output.permute(1,0,2)
        #print(output[])   
        
        _, max_index = torch.max(output, dim=2)  # max_index.shape == torch.Size([32, 64])
        translations = []
        for k in range(len(src)):
            raw_prediction = list(max_index[:, k].detach().cpu().numpy())  # len(raw_prediction) == 32
            prediction = torch.IntTensor([c for c, _ in groupby(raw_prediction) if c != self.TRG_PAD_IDX])
            trg_tokens = [self.idx2chars[i] for i in prediction.detach().cpu().numpy()]
            translations.append(''.join(trg_tokens))

        
        return translations[0]


if __name__ == '__main__':
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    ocr = LatinOCR(
        os.path.join("./latinocr/weight", "latin_abinet_ctc_marg_finetune_openimage.pt"), device
    )
    IMG_H = 32
    IMG_W  = 128
    results = []
    move_img_b = []
    move_img_c = []
    move_img_d = []
    move_img_e = []
    move_img_f = []
    move_img_g = []
    move_img_h = []
    move_img_i = []
    move_img_j = []
    move_img_k = []
    move_img_l = []
    move_img_m = []
    move_img_n = []
    move_img_o = []
    move_img_p = []
    move_img_q = []
    move_img_r = []
    move_img_s = []
    move_img_t = []
    move_img_u = []
    move_img_v = []
    move_img_w = []
    move_img_x = []
    move_img_y = []
    move_img_z = []
    move_img_0 = []
    move_img_1 = []
    move_img_2 = []
    move_img_3 = []
    move_img_4 = []
    move_img_5 = []
    move_img_6 = []
    move_img_7 = []
    move_img_8 = []
    move_img_9 = [] 
    print(os.path.join("weight", "latin_abinet_ctc_marg_finetune_openimage.pt"))
    with torch.no_grad():
        for img_name in os.listdir('./latinocr/chara'):
            
            im = Image.open(os.path.join('./latinocr/chara',img_name)).convert('L')
            
            im=  im.resize((IMG_W,IMG_H),resample=Image.BICUBIC)
            #print(torch.__version__)
            im = ocr.toTensor(im)
            im.sub_(0.5).div_(0.5)
            #print(im.min(), im.max())
            preds = ocr.translate_sentence(im.to(device))
            #print(preds)
            if preds == 'b':
                move_img_b.append(img_name)
            elif preds == 'c':
                move_img_c.append(img_name)
            elif preds == 'd':
                move_img_d.append(img_name)
            elif preds == 'e':
                move_img_e.append(img_name)
            elif preds == 'f':
                move_img_f.append(img_name)
            elif preds == 'g':
                move_img_g.append(img_name)
            elif preds == 'h':
                move_img_h.append(img_name)
            elif preds == 'i':
                move_img_i.append(img_name)
            elif preds == 'j':
                move_img_j.append(img_name)
            elif preds == 'k':
                move_img_k.append(img_name)
            elif preds == 'l':
                move_img_l.append(img_name)
            elif preds == 'm':
                move_img_m.append(img_name)
            elif preds == 'n':
                move_img_n.append(img_name)
            elif preds == 'o':
                move_img_o.append(img_name)
            elif preds == 'p':
                move_img_p.append(img_name)
            elif preds == 'q':
                move_img_q.append(img_name)
            elif preds == 'r':
                move_img_r.append(img_name)
            elif preds == 's':
                move_img_s.append(img_name)
            elif preds == 't':
                move_img_t.append(img_name)
            elif preds == 'u':
                move_img_u.append(img_name)
            elif preds == 'v':
                move_img_v.append(img_name)
            elif preds == 'w':
                move_img_w.append(img_name)
            elif preds == 'x':
                move_img_x.append(img_name)
            elif preds == 'y':
                move_img_y.append(img_name)
            elif preds == 'z':
                move_img_z.append(img_name)
            elif preds == '0':
                move_img_0.append(img_name)
            elif preds == '1':
                move_img_1.append(img_name)
            elif preds == '2':
                move_img_2.append(img_name)
            elif preds == '3':
                move_img_3.append(img_name)
            elif preds == '4':
                move_img_4.append(img_name)
            elif preds == '5':
                move_img_5.append(img_name)
            elif preds == '6':
                move_img_6.append(img_name)
            elif preds == '7':
                move_img_7.append(img_name)
            elif preds == '8':
                move_img_8.append(img_name)
            elif preds == '9':
                move_img_9.append(img_name)
        
                #print(img_name)
                #im.save(os.path.join('./latinocr/small_a',img_name))
    print(move_img_b)
    move_images('./latinocr/chara','./latinocr/b',move_img_b)
    move_images('./latinocr/chara','./latinocr/c',move_img_c)
    move_images('./latinocr/chara','./latinocr/d',move_img_d)
    move_images('./latinocr/chara','./latinocr/e',move_img_e)
    move_images('./latinocr/chara','./latinocr/f',move_img_f)
    move_images('./latinocr/chara','./latinocr/g',move_img_g)
    move_images('./latinocr/chara','./latinocr/h',move_img_h)
    move_images('./latinocr/chara','./latinocr/i',move_img_i)
    move_images('./latinocr/chara','./latinocr/j',move_img_j)
    move_images('./latinocr/chara','./latinocr/k',move_img_k)
    move_images('./latinocr/chara','./latinocr/l',move_img_l)
    move_images('./latinocr/chara','./latinocr/m',move_img_m)
    move_images('./latinocr/chara','./latinocr/n',move_img_n)
    move_images('./latinocr/chara','./latinocr/o',move_img_o)
    move_images('./latinocr/chara','./latinocr/p',move_img_p)
    move_images('./latinocr/chara','./latinocr/q',move_img_q)
    move_images('./latinocr/chara','./latinocr/r',move_img_r)

    move_images('./latinocr/chara','./latinocr/s',move_img_s)
    move_images('./latinocr/chara','./latinocr/t',move_img_t)
    move_images('./latinocr/chara','./latinocr/u',move_img_u)
    move_images('./latinocr/chara','./latinocr/v',move_img_v)
    move_images('./latinocr/chara','./latinocr/w',move_img_w)
    move_images('./latinocr/chara','./latinocr/x',move_img_x)
    move_images('./latinocr/chara','./latinocr/y',move_img_y)
    move_images('./latinocr/chara','./latinocr/z',move_img_z)
    move_images('./latinocr/chara','./latinocr/0',move_img_0)
    move_images('./latinocr/chara','./latinocr/1',move_img_1)
    move_images('./latinocr/chara','./latinocr/2',move_img_2)

    move_images('./latinocr/chara','./latinocr/3',move_img_3)
    move_images('./latinocr/chara','./latinocr/4',move_img_4)
    move_images('./latinocr/chara','./latinocr/5',move_img_5)
    move_images('./latinocr/chara','./latinocr/6',move_img_6)
    move_images('./latinocr/chara','./latinocr/7',move_img_7)
    move_images('./latinocr/chara','./latinocr/8',move_img_8)
    move_images('./latinocr/chara','./latinocr/9',move_img_9)

    #file1 = open("./myfile.txt","w", encoding='utf-8')
    ##L = ["This is Delhi \n","This is Paris \n","This is London \n"]
    #file1.writelines(results)
    #file1.close()